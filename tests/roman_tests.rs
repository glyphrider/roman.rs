use roman::convert::{to,from};
use pretty_assertions::assert_eq;
use test_case::test_case;

// #[test]
// fn a_sample_test() {
//     assert_eq!(1,1);
// }

#[test_case(1, "I"; "1 to I")]
#[test_case(2, "II"; "2 to II")]
#[test_case(3, "III"; "3 to III")]
#[test_case(4, "IV"; "4 to IV")]
#[test_case(5, "V"; "5 to V")]
#[test_case(6, "VI"; "6 to VI")]
#[test_case(7, "VII"; "7 to VII")]
#[test_case(8, "VIII"; "8 to VIII")]
#[test_case(9, "IX"; "9 to IX")]
#[test_case(10, "X"; "10 to X")]
#[test_case(11, "XI"; "11 to XI")]
#[test_case(14, "XIV"; "14 to XIV")]
#[test_case(15, "XV"; "15 to XV")]
#[test_case(16, "XVI"; "16 to XVI")]
#[test_case(19, "XIX"; "19 to XIX")]
#[test_case(20, "XX"; "20 to XX")]
#[test_case(21, "XXI"; "21 to XXI")]
#[test_case(39, "XXXIX"; "39 to XXXIX")]
#[test_case(40, "XL"; "40 to XL")]
#[test_case(41, "XLI"; "41 to XLI")]
#[test_case(42, "XLII"; "42 to XLII")]
#[test_case(43, "XLIII"; "43 to XLIII")]
#[test_case(44, "XLIV"; "44 to XLIV")]
#[test_case(45, "XLV"; "45 to XLV")]
#[test_case(46, "XLVI"; "46 to XLVI")]
#[test_case(47, "XLVII"; "47 to XLVII")]
#[test_case(48, "XLVIII"; "48 to XLVIII")]
#[test_case(49, "XLIX"; "49 to XLIX")]
#[test_case(50, "L"; "50 to L")]
#[test_case(89, "LXXXIX"; "89 to LXXXIX")]
#[test_case(90, "XC"; "90 to XC")]
#[test_case(91, "XCI"; "91 to XCI")]
#[test_case(99, "XCIX"; "99 to XCIX")]
#[test_case(100, "C"; "converet 100 to C")]
#[test_case(101, "CI"; "101 to CI")]
#[test_case(200, "CC"; "200 to CC")]
#[test_case(399, "CCCXCIX"; "399 to CCCXCIX")]
#[test_case(400, "CD"; "400 to CD")]
#[test_case(401, "CDI"; "401 to CDI")]
#[test_case(499, "CDXCIX"; "499 to CDXCIX")]
#[test_case(500, "D"; "500 to D")]
#[test_case(501, "DI"; "501 to DI")]
#[test_case(899, "DCCCXCIX"; "899 to DCCCXCIX")]
#[test_case(900, "CM"; "900 to CM")]
#[test_case(999, "CMXCIX"; "999 to CMXCIX")]
#[test_case(1000, "M"; "1000 to M")]
#[test_case(1001, "MI"; "1001 to MI")]
#[test_case(1968, "MCMLXVIII"; "1968 to MCMLXVIII")]
fn test_to(arabic: u16, roman: &str) {
    let result = to(arabic);
    assert_eq!(result,roman);
}

#[test_case(1, "I"; "1 to I")]
#[test_case(2, "II"; "2 to II")]
#[test_case(3, "III"; "3 to III")]
#[test_case(4, "IV"; "4 to IV")]
#[test_case(5, "V"; "5 to V")]
#[test_case(6, "VI"; "6 to VI")]
#[test_case(7, "VII"; "7 to VII")]
#[test_case(8, "VIII"; "8 to VIII")]
#[test_case(9, "IX"; "9 to IX")]
#[test_case(10, "X"; "10 to X")]
#[test_case(11, "XI"; "11 to XI")]
#[test_case(14, "XIV"; "14 to XIV")]
#[test_case(15, "XV"; "15 to XV")]
#[test_case(16, "XVI"; "16 to XVI")]
#[test_case(19, "XIX"; "19 to XIX")]
#[test_case(20, "XX"; "20 to XX")]
#[test_case(21, "XXI"; "21 to XXI")]
#[test_case(39, "XXXIX"; "39 to XXXIX")]
#[test_case(40, "XL"; "40 to XL")]
#[test_case(41, "XLI"; "41 to XLI")]
#[test_case(42, "XLII"; "42 to XLII")]
#[test_case(43, "XLIII"; "43 to XLIII")]
#[test_case(44, "XLIV"; "44 to XLIV")]
#[test_case(45, "XLV"; "45 to XLV")]
#[test_case(46, "XLVI"; "46 to XLVI")]
#[test_case(47, "XLVII"; "47 to XLVII")]
#[test_case(48, "XLVIII"; "48 to XLVIII")]
#[test_case(49, "XLIX"; "49 to XLIX")]
#[test_case(50, "L"; "50 to L")]
#[test_case(89, "LXXXIX"; "89 to LXXXIX")]
#[test_case(90, "XC"; "90 to XC")]
#[test_case(91, "XCI"; "91 to XCI")]
#[test_case(99, "XCIX"; "99 to XCIX")]
#[test_case(100, "C"; "converet 100 to C")]
#[test_case(101, "CI"; "101 to CI")]
#[test_case(200, "CC"; "200 to CC")]
#[test_case(399, "CCCXCIX"; "399 to CCCXCIX")]
#[test_case(400, "CD"; "400 to CD")]
#[test_case(401, "CDI"; "401 to CDI")]
#[test_case(499, "CDXCIX"; "499 to CDXCIX")]
#[test_case(500, "D"; "500 to D")]
#[test_case(501, "DI"; "501 to DI")]
#[test_case(899, "DCCCXCIX"; "899 to DCCCXCIX")]
#[test_case(900, "CM"; "900 to CM")]
#[test_case(999, "CMXCIX"; "999 to CMXCIX")]
#[test_case(1000, "M"; "1000 to M")]
#[test_case(1001, "MI"; "1001 to MI")]
#[test_case(1968, "MCMLXVIII"; "1968 to MCMLXVIII")]
fn test_from(arabic: u16, roman: &str) {
    let result = from(roman);
    assert_eq!(result,arabic);
}
